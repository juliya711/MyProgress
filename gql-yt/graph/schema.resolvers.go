package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.60

import (
	"context"
	"time"

	"github.com/juliya711/gql-yt/database"
	"github.com/juliya711/gql-yt/graph/model"
	"go.mongodb.org/mongo-driver/bson"
)

var db = database.Connect()

// CreateJobListing is the resolver for the createJobListing field.
func (r *mutationResolver) CreateJobListing(ctx context.Context, input model.CreateJobListingInput) (*model.JobListing, error) {
	return db.CreateJobListing(input), nil
}

// UpdateJobListing is the resolver for the updateJobListing field.
func (r *mutationResolver) UpdateJobListing(ctx context.Context, id string, input model.UpdateJobListingInput) (*model.JobListing, error) {
	return db.UpdateJobListing(id, input), nil
}

// DeleteJobListing is the resolver for the deleteJobListing field.
func (r *mutationResolver) DeleteJobListing(ctx context.Context, id string) (*model.DeleteJobResponse, error) {
	return db.DeleteJobListing(id), nil
}

// Jobs is the resolver for the jobs field.
func (r *queryResolver) Jobs(ctx context.Context) ([]*model.JobListing, error) {
	return db.GetJobs(), nil
}

// Job is the resolver for the job field.
func (r *queryResolver) Job(ctx context.Context, id string) (*model.JobListing, error) {
	return db.GetJob(id), nil
}

// GetDiscoveredDevices fetches devices for the given company_id from the assets collection.
func (r *queryResolver) GetDiscoveredDevices(companyID string) ([]*model.DeviceDiscovered, error) {
	// Access the assets collection
	assetsCollection := db.Client().Database("ATNA").Collection("assets")
	ctx, cancel := context.WithTimeout(context.Background(), 30*time.Second)
	defer cancel()

	// Query filter
	filter := bson.M{"company_id": companyID}

	// Find matching documents
	cursor, err := assetsCollection.Find(ctx, filter)
	if err != nil {
		return nil, err
	}
	defer cursor.Close(ctx)

	// Prepare the result slice
	var devices []*model.DeviceDiscovered
	for cursor.Next(ctx) {
		var device model.DeviceDiscovered
		if err := cursor.Decode(&device); err != nil {
			return nil, err
		}
		devices = append(devices, &device) // Append pointer to device
	}

	if err := cursor.Err(); err != nil {
		return nil, err
	}

	return devices, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
